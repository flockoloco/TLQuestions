Q1-Q4 - Fix or improve the implementation of the below methods.

Q1 - Fix or improve the implementation of the below methods


local function releaseStorage(player)
    player:setStorageValue(1000, -1)
end

--
function onLogout(player)
    if player:getStorageValue(1000) == 1 then
        --We can avoid the addEvent Method as the releaseStorage is a simple function and a timer doesnt seem to be needed
        --either call player:setStorageValue(1000, -1) or releaseStorage(player) right after 
        releaseStorage(player)
    end
    return true -- player logs out successfully
end


Q2 - Fix or improve the implementation of the below method

function printSmallGuildNames(memberCount)
    -- this method is supposed to print names of all guilds that have less than memberCount max members

    --Assuming db is all configured
    --We can keep selectGuildQuery short by calling storeQuery and memberCount in the same line
    local selectGuildQuery = db.storeQuery("SELECT name FROM guilds WHERE max_members < '"..memberCount.."';")
    --Quick check for anything
    if selectGuildQuery then
        --If there's result get and print it.
        local guildName = result.getDataString(selectGuildQuery, 'name')
        print(guildName)
        return 0;
    --If there's no result return a "no guild found"
    else
        print('no guild found')
        return 0;
    end
end


Q3 - Fix or improve the name and the implementation of the below method

function removeMemberFromParty(playerId, memberName)
    --It is safe to remove player variable as it is not used for this function.
    local party = Player(playerId):getParty()

    for k,v in pairs(party:getMembers()) do
        if v == Player(memberName) then
            party:removeMember(v)
        end
    end
end

Q4 - Assume all method calls work fine. Fix the memory leak issue in below method

void Game::addItemToPlayer(const std::string& recipient, uint16_t itemId)
{
    --to avoid using delete we use smart pointers. std::unique_ptr<T>
    std::unique_ptr<Player> player(new g_game.getPlayerByName(recipient));
    
    if (!player) {
        player.reset(new Player(nullptr));
        if (!IOLoginData::loadPlayerByName(player, recipient)) {
            return;
        }
    }

    std::unique_ptr<Item> item(Item::CreateItem(itemId));
    if (!item) {
        return;
    }

    g_game.internalAddItem(player->getInbox(), item, INDEX_WHEREEVER, FLAG_NOLIMIT);

    if (player->isOffline()) {
        IOLoginData::savePlayer(player);
    }
}
